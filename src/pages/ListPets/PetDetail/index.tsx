import { useState } from "react";
import { Heart, Share2, Save, Edit } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import styles from "./pet-detail.module.css";
import { useNavigate, useParams } from "react-router-dom";
import ROUTES from "@/constants/routes";
import Breadcrumb from "@/components/Breadcrumb/Breadcrumb";

export default function PetDetail() {
  const navigate = useNavigate();
  const param = useParams();

  // State for staff status - in a real app, this would come from auth context
  const [isStaff, setIsStaff] = useState(false);
  // State for edit mode
  const [isEditing, setIsEditing] = useState(false);

  // Pet details state
  const [petDetails, setPetDetails] = useState({
    breed: "Ch√≥ c·ªè Vi·ªát Nam",
    healthStatus: "T·ªët, ti√™m v·∫Øc xin ƒë·∫ßy ƒë·ªß, ƒë√£ tri·ªát s·∫£n",
    weight: "Trung b√¨nh",
    personality: "NƒÉng ƒë·ªông, nhanh nh·∫πn, th√¢n thi·ªán",
    foodAndToys: "ƒÇn u·ªëng b√¨nh th∆∞·ªùng v√† th√≠ch ƒë·ªì ch∆°i, nh√† c√≥ s·∫µn",
    suitableWith: "Ch√≥, tr·∫ª em/sinh vi√™n, ng∆∞·ªùi tr·∫ª tu·ªïi",
    notSuitableWith: "Ng∆∞·ªùi b·∫≠n r·ªôn",
    location: "ƒê·ªìng Nai",
  });

  // Handle input changes
  const handleInputChange = (field: string, value: string) => {
    setPetDetails({
      ...petDetails,
      [field]: value,
    });
  };

  // Handle form submission
  const handleSave = () => {
    // Here you would typically send the updated data to your API
    console.log("Saving updated pet details:", petDetails);
    setIsEditing(false);
  };

  // Toggle staff mode for testing purposes
  const toggleStaffMode = () => {
    setIsStaff(!isStaff);
    if (isEditing && !isStaff) {
      setIsEditing(false);
    }
  };

  // Define breadcrumb items
  const breadcrumbItems = [
    { label: "Trang ch·ªß", path: "/" },
    { label: "L√†m quen v·ªõi c√°c b√©", path: "/pets" },
    { label: "Danny" },
  ];

  return (
    <div className="container mx-auto">
      <Breadcrumb items={breadcrumbItems} />
      <div className={styles.container}>
        {/* Breadcrumb */}

        {/* Toggle Staff Mode Button (for demo purposes) */}
        <div className="mb-4 text-right">
          <Button
            variant="outline"
            size="sm"
            onClick={toggleStaffMode}
            className="mb-4"
          >
            {isStaff ? "Switch to User Mode" : "Switch to Staff Mode"}
          </Button>

          {isStaff && (
            <Button
              variant="blue"
              size="sm"
              className="ml-2"
              onClick={() => setIsEditing(!isEditing)}
            >
              {isEditing ? (
                <>
                  <Save className="w-4 h-4 mr-1" /> Save
                </>
              ) : (
                <>
                  <Edit className="w-4 h-4 mr-1" /> Edit
                </>
              )}
            </Button>
          )}
        </div>

        <div className={styles.content}>
          <div className={styles.imageContainer}>
            <img
              src="../../../../../public/Danny.png"
              alt="Danny - Ch√≥ tr∆∞·ªüng th√†nh"
              className={styles.petImage}
            />
          </div>

          <div className={styles.details}>
            <div className={styles.titleRow}>
              <h1 className={styles.petName}>Danny</h1>
              <div className={styles.actions}>
                <Button
                  variant="ghost"
                  size="icon"
                  className={styles.actionButton}
                  animation="none"
                >
                  <Heart className={styles.actionIcon} />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className={styles.actionButton}
                  animation="none"
                >
                  <Share2 className={styles.actionIcon} />
                </Button>
              </div>
            </div>

            <div className={styles.petTags}>
              <span className={styles.tag}>Ch√≥</span>
              <span className={styles.tagSeparator}>|</span>
              <span className={styles.tag}>Tr∆∞·ªüng th√†nh</span>
              <span className={styles.tagSeparator}>|</span>
              <span className={styles.tag}>ƒê·ª±c</span>
            </div>

            <p className={styles.description}>
              Xin ch√†o! Con l√† Danny, con l√† m·ªôt ch√∫ ch√≥ nh·ªè ƒëang ƒë·ª£i m·ªôt gia
              ƒë√¨nh vui v·∫ª v√† lu√¥n s·∫µn s√†ng ch∆°i ƒë√πa c√πng gia ƒë√¨nh. V·ªõi s·ª± trung
              th√†nh v√† tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng, con s·∫Ω mang ƒë·∫øn ni·ªÅm vui m·ªói ng√†y!
              üêæ
            </p>

            <h2 className={styles.sectionTitle}>Th√¥ng tin chi ti·∫øt</h2>

            <div className={styles.infoGrid}>
              {isEditing ? (
                // Editing mode - direct Input components
                <>
                  <div className={styles.infoRow}>
                    <label className={styles.infoLabel}>Gi·ªëng</label>
                    <Input
                      className={styles.infoValue}
                      value={petDetails.breed}
                      onChange={(e) =>
                        handleInputChange("breed", e.target.value)
                      }
                    />
                  </div>

                  <div className={styles.infoRow}>
                    <label className={styles.infoLabel}>
                      T√¨nh tr·∫°ng S·ª©c kh·ªèe
                    </label>
                    <Input
                      className={styles.infoValue}
                      value={petDetails.healthStatus}
                      onChange={(e) =>
                        handleInputChange("healthStatus", e.target.value)
                      }
                    />
                  </div>

                  <div className={styles.infoRow}>
                    <label className={styles.infoLabel}>C√¢n n·∫∑ng</label>
                    <Input
                      className={styles.infoValue}
                      value={petDetails.weight}
                      onChange={(e) =>
                        handleInputChange("weight", e.target.value)
                      }
                    />
                  </div>

                  <div className={styles.infoRow}>
                    <label className={styles.infoLabel}>T√≠nh c√°ch</label>
                    <Input
                      className={styles.infoValue}
                      value={petDetails.personality}
                      onChange={(e) =>
                        handleInputChange("personality", e.target.value)
                      }
                    />
                  </div>

                  <div className={styles.infoRow}>
                    <label className={styles.infoLabel}>
                      Th·ª©c ƒÉn v√† ƒë·ªì ch∆°i
                    </label>
                    <Input
                      className={styles.infoValue}
                      value={petDetails.foodAndToys}
                      onChange={(e) =>
                        handleInputChange("foodAndToys", e.target.value)
                      }
                    />
                  </div>

                  <div className={styles.infoRow}>
                    <label className={styles.infoLabel}>Ph√π h·ª£p v·ªõi</label>
                    <Input
                      className={styles.infoValue}
                      value={petDetails.suitableWith}
                      onChange={(e) =>
                        handleInputChange("suitableWith", e.target.value)
                      }
                    />
                  </div>

                  <div className={styles.infoRow}>
                    <label className={styles.infoLabel}>
                      Kh√¥ng ph√π h·ª£p v·ªõi
                    </label>
                    <Input
                      className={styles.infoValue}
                      value={petDetails.notSuitableWith}
                      onChange={(e) =>
                        handleInputChange("notSuitableWith", e.target.value)
                      }
                    />
                  </div>

                  <div className={styles.infoRow}>
                    <label className={styles.infoLabel}>ƒê·ªãa ch·ªâ</label>
                    <Input
                      className={styles.infoValue}
                      value={petDetails.location}
                      onChange={(e) =>
                        handleInputChange("location", e.target.value)
                      }
                    />
                  </div>
                </>
              ) : (
                // View mode - static text display
                <>
                  <div className={styles.infoRow}>
                    <div className={styles.infoLabel}>Gi·ªëng</div>
                    <div className={styles.infoValue}>{petDetails.breed}</div>
                  </div>

                  <div className={styles.infoRow}>
                    <div className={styles.infoLabel}>T√¨nh tr·∫°ng S·ª©c kh·ªèe</div>
                    <div className={styles.infoValue}>
                      {petDetails.healthStatus}
                    </div>
                  </div>

                  <div className={styles.infoRow}>
                    <div className={styles.infoLabel}>C√¢n n·∫∑ng</div>
                    <div className={styles.infoValue}>{petDetails.weight}</div>
                  </div>

                  <div className={styles.infoRow}>
                    <div className={styles.infoLabel}>T√≠nh c√°ch</div>
                    <div className={styles.infoValue}>
                      {petDetails.personality}
                    </div>
                  </div>

                  <div className={styles.infoRow}>
                    <div className={styles.infoLabel}>Th·ª©c ƒÉn v√† ƒë·ªì ch∆°i</div>
                    <div className={styles.infoValue}>
                      {petDetails.foodAndToys}
                    </div>
                  </div>

                  <div className={styles.infoRow}>
                    <div className={styles.infoLabel}>Ph√π h·ª£p v·ªõi</div>
                    <div className={styles.infoValue}>
                      {petDetails.suitableWith}
                    </div>
                  </div>

                  <div className={styles.infoRow}>
                    <div className={styles.infoLabel}>Kh√¥ng ph√π h·ª£p v·ªõi</div>
                    <div className={styles.infoValue}>
                      {petDetails.notSuitableWith}
                    </div>
                  </div>

                  <div className={styles.infoRow}>
                    <div className={styles.infoLabel}>ƒê·ªãa ch·ªâ</div>
                    <div className={styles.infoValue}>
                      {petDetails.location}
                    </div>
                  </div>
                </>
              )}
            </div>

            {isEditing ? (
              <div className="text-center mt-6">
                <Button
                  variant="blue"
                  shape="pill"
                  animation="none"
                  onClick={handleSave}
                >
                  L∆∞u th√¥ng tin
                </Button>
              </div>
            ) : (
              <div className={styles.buttonContainer}>
                <Button
                  variant="blue"
                  shape="default"
                  animation="none"
                  className="mr-4"
                >
                  Li√™n h·ªá tr·ª±c ti·∫øp
                </Button>
                <Button
                  variant="pink"
                  shape="default"
                  animation="none"
                  onClick={() =>
                    navigate(
                      ROUTES.PUBLIC.ADOPTION_FORM.replace(
                        ":id",
                        param?.id || ""
                      )
                    )
                  }
                >
                  ƒêƒÉng k√Ω th·ªß t·ª•c nh·∫≠n nu√¥i
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
