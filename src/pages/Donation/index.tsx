import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useEffect } from "react";

import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Checkbox } from "@/components/ui/checkbox";
import { BANNER, LOGO } from "@/constants/global";
import Breadcrumb from "@/components/Breadcrumb/Breadcrumb";
import ROUTES from "@/constants/routes";
import ContentHeader from "@/components/ContentHeader/ContentHeader";
import { useSelector } from "react-redux";
import { selectorAuth } from "@/store/modules/auth/selector";
import { Link } from "react-router-dom";
import { userService } from "@/services/userService";

const donationSchema = z.object({
  amount: z.string().min(1, "Vui l√≤ng ch·ªçn s·ªë ti·ªÅn"),
  customAmount: z.string().optional(),
  fullName: z.string().min(2, "H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±"),
  email: z.string().email("Email kh√¥ng h·ª£p l·ªá"),
  address: z.string().min(5, "ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±"),
  agreeTerms: z
    .boolean()
    .refine((val) => val === true, "B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n"),
}).refine((data) => {
  if (data.amount === "custom") {
    if (!data.customAmount || data.customAmount.trim() === "") {
      return false;
    }
    const numVal = Number(data.customAmount.replace(/,/g, ''));
    if (isNaN(numVal) || numVal < 1000) {
      return false;
    }
  }
  return true;
}, {
  message: "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá (t·ªëi thi·ªÉu 1,000 VNƒê)",
  path: ["customAmount"],
});

const contactSchema = z.object({
  email: z.string().email("Email kh√¥ng h·ª£p l·ªá"),
  phone: z.string().min(10, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"),
});

export default function DonationPage() {
  const isAuthenticated = useSelector(selectorAuth.isAuthenticated);
  const userInfo: IRedux.UserInfo = useSelector(selectorAuth.userInfo)

  const donationForm = useForm<z.infer<typeof donationSchema>>({
    resolver: zodResolver(donationSchema),
    defaultValues: {
      amount: "",
      customAmount: "",
      fullName: "",
      email: "",
      address: "",
      agreeTerms: false,
    },
  });

  const contactForm = useForm<z.infer<typeof contactSchema>>({
    resolver: zodResolver(contactSchema),
    defaultValues: {
      email: "",
      phone: "",
    },
  });

  // Add scroll animation classes with fadeInRight effect for Donation
  useEffect(() => {
    const animateOnScroll = () => {
      const elements = document.querySelectorAll(".animate-on-scroll");

      elements.forEach((element) => {
        const elementPosition = element.getBoundingClientRect().top;
        const windowHeight = window.innerHeight;

        if (elementPosition < windowHeight - 100) {
          element.classList.add("animate-fadeInRight");
        }
      });
    };

    window.addEventListener("scroll", animateOnScroll);
    // Initial check for elements in view on page load
    animateOnScroll();

    return () => {
      window.removeEventListener("scroll", animateOnScroll);
    };
  }, []);

  const presetAmounts = ["20,000", "50,000", "200,000", "500,000", "1,000,000"];

  async function onDonationSubmit(values: z.infer<typeof donationSchema>) {
    // Process the final amount value
    const finalAmountString = values.amount === "custom"
      ? values.customAmount
      : values.amount;

    const finalAmount = Number(finalAmountString?.replace(/,/g, '') || '0');

    try {
      const response = await userService.createPayment({
        campaignId: 3,
        amount: finalAmount,
        message: "·ª¶ng h·ªô chi·∫øn d·ªãch",
        donorUserId: userInfo.userId,
      });
      if (response.status === 200) {
        window.location.href = response.data.url;
      }
    } catch (error) {
      console.error("Error create payment: ", error)
    }
  }

  function onContactSubmit(values: z.infer<typeof contactSchema>) {
    console.log("Contact form:", values);
  }

  const breadcrumbItems = [
    { label: "Trang ch·ªß", path: ROUTES.PUBLIC.HOME },
    { label: "Quy√™n g√≥p" },
  ];

  return (
    <div className="min-h-screen ">
      {/* Breadcrumb */}
      <div className="animate-on-scroll opacity-0">
        <Breadcrumb items={breadcrumbItems} />
      </div>

      {isAuthenticated ? (
        <div className="container mx-auto">
          <div className="grid lg:grid-cols-2 gap-36 pb-10">
            {/* Left Column */}
            <div className="animate-on-scroll opacity-0">
              {/* Main Content */}
              <div>
                <ContentHeader
                  title="M·ªói s·ª± ƒë√≥ng g√≥p l√† m·ªôt hy v·ªçng"
                  className="mb-12"
                />

                <div className="mb-6">
                  <img
                    src={BANNER.DOG_CIRCLE}
                    alt="Dogs looking down in a circle"
                    className="rounded-2xl w-full"
                  />
                </div>

                <div className=" text-gray-700">
                  <ContentHeader
                    title="H√£y c√πng lan t·ªèa y√™u th∆∞∆°ng!"
                    className="font-semibold text-[#0053A3]"
                    level="h2"
                  />
                  <p className="text-sm leading-relaxed">
                    M·ªói s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n ƒë·ªÅu mang l·∫°i √Ω nghƒ©a to l·ªõn, gi√∫u mang
                    ƒë·∫øn hy v·ªçng v√† s·ª± s·ªëng cho nh·ªØng b√© th√∫ c∆∞ng b√© b·ªèng r∆°i v√†o
                    c·∫£nh kh√≥ khƒÉn v√† ƒë∆∞·ª£c chƒÉm s√≥c c·∫©n th·∫≠n v√† t·∫≠n t√¢m m·ªói ƒë√™m m·ªói
                    ng√†y cho ƒë·∫øn khi ch√∫ng c√≥ th·ªÉ t√¨m th·∫•y ƒë√¥i ch·ªß cu·ªôc ƒë·ªùi c·ªßa
                    m√¨nh.
                  </p>
                  <p className="text-sm">
                    üíù{" "}
                    <span className="text-[#FF99C0] text-lg font-bold">
                      QUY√äN G√ìP
                    </span>{" "}
                    ngay ƒë·ªÉ c·ª©u nh·ªØng ch√∫ ch√≥ v·ªõi ni·ªÅm n·ªìng c·∫ßu chuy·ªán h·∫°nh ph√∫c!
                  </p>
                </div>
              </div>

              {/* Contact Form */}
              <Card className="/80 backdrop-blur-sm bg-opacity border-none shadow-none">
                <CardContent className="p-6">
                  <div className="text-center mb-6">
                    <div className="flex justify-center mb-4">
                      <img src={LOGO.MESSAGE_PINK} alt="message-icon" />
                    </div>
                    <h3 className="text-lg font-semibold text-gray-900">
                      B·∫°n c√≥ c√¢u h·ªèi v·ªÅ ph·∫ßn Quy√™n g√≥p
                    </h3>
                  </div>

                  <Form {...contactForm}>
                    <form
                      onSubmit={contactForm.handleSubmit(onContactSubmit)}
                      className="space-y-4 "
                    >
                      <FormField
                        control={contactForm.control}
                        name="email"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>ƒê·ªãa ch·ªâ email c·ªßa b·∫°n</FormLabel>
                            <FormControl>
                              <Input
                                placeholder="V√≠ d·ª•: nguyenvan@gmail.com"
                                {...field}
                                className=""
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={contactForm.control}
                        name="phone"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>C√¢u h·ªèi c·ªßa b·∫°n</FormLabel>
                            <FormControl>
                              <Input
                                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n"
                                {...field}
                                className=""
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <Button
                        variant={"blue"}
                        type="submit"
                        className="w-full"
                        animation={"none"}
                      >
                        G·ª≠i c√¢u h·ªèi
                      </Button>
                    </form>
                  </Form>
                </CardContent>
              </Card>
            </div>

            {/* Right Column - Donation Form */}
            <div className="animate-on-scroll opacity-0 pt-30">
              <Card className="/90 backdrop-blur-sm bg-opacity border-1px shadow-none rounded-2xl">
                <CardContent className="py-10 px-20">
                  <Form {...donationForm}>
                    <form
                      onSubmit={donationForm.handleSubmit(onDonationSubmit)}
                      className="space-y-14"
                    >
                      <div className="space-y-6">
                        {/* Preset Amounts */}
                        <FormField
                          control={donationForm.control}
                          name="amount"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="mb-2">
                                Ch·ªçn s·ªë ti·ªÅn b·∫°n mu·ªën quy√™n g√≥p
                              </FormLabel>
                              <FormControl>
                                <div className="space-y-4">
                                  <div className="grid grid-cols-2 gap-3">
                                    {presetAmounts.map((amount) => (
                                      <Button
                                        key={amount}
                                        type="button"
                                        variant={field.value === amount ? "blue" : "blueOutline"}
                                        animation={"none"}
                                        onClick={() => {
                                          field.onChange(amount);
                                          // Clear custom amount when selecting preset
                                          donationForm.setValue("customAmount", "");
                                        }}
                                        className={field.value === amount ? "shadow-md" : ""}
                                      >
                                        {amount}
                                      </Button>
                                    ))}
                                    <Button
                                      type="button"
                                      variant={field.value === "custom" ? "pink" : "pinkOutline"}
                                      animation={"none"}
                                      onClick={() => field.onChange("custom")}
                                      className={field.value === "custom" ? "shadow-md" : ""}
                                    >
                                      Nh·∫≠p s·ªë ti·ªÅn kh√°c
                                    </Button>
                                  </div>

                                  {/* Custom Amount Input - Show when "custom" is selected */}
                                  {field.value === "custom" && (
                                    <div className="mt-4">
                                      <FormField
                                        control={donationForm.control}
                                        name="customAmount"
                                        render={({ field: customField }) => (
                                          <FormItem>
                                            <FormLabel className="text-sm">Nh·∫≠p s·ªë ti·ªÅn (VNƒê)</FormLabel>
                                            <FormControl>
                                              <Input
                                                {...customField}
                                                type="number"
                                                placeholder="V√≠ d·ª•: 100000"
                                                className="w-full"
                                                min="1000"
                                                step="1000"
                                              />
                                            </FormControl>
                                            <FormMessage />
                                          </FormItem>
                                        )}
                                      />
                                    </div>
                                  )}
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>

                      {/* Personal Information */}
                      <div className="space-y-4">
                        <h3 className="font-semibold">Th√¥ng tin c·ªßa b·∫°n</h3>

                        <FormField
                          control={donationForm.control}
                          name="fullName"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="mb-2">H·ªç v√† t√™n</FormLabel>
                              <FormControl>
                                <Input {...field} className="" />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={donationForm.control}
                          name="email"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="mb-2">Email</FormLabel>
                              <FormControl>
                                <Input type="email" {...field} className="" />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={donationForm.control}
                          name="address"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="mb-2">ƒê·ªãa ch·ªâ</FormLabel>
                              <FormControl>
                                <Input {...field} className="" />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={donationForm.control}
                          name="agreeTerms"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <Label className="text-sm">
                                  T√¥i ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n
                                </Label>
                              </div>
                            </FormItem>
                          )}
                        />
                      </div>

                      <Button
                        type="submit"
                        variant={"pink"}
                        animation={"none"}
                        className="w-full text-white font-semibold py-3"
                      >
                        QUY√äN G√ìP
                      </Button>
                    </form>
                  </Form>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      ) : (
        <div className="container mx-auto px-4 pb-20">
          <div className="max-w-4xl mx-auto">
            {/* Header Section */}
            <div className="text-center mb-12 animate-on-scroll opacity-0">
              <ContentHeader
                title="M·ªói s·ª± ƒë√≥ng g√≥p l√† m·ªôt hy v·ªçng"
                className="mb-6"
              />
              <p className="text-lg text-gray-600 max-w-2xl mx-auto">
                ƒê·ªÉ c√≥ th·ªÉ tham gia quy√™n g√≥p v√† gi√∫p ƒë·ª° nh·ªØng b√© th√∫ c∆∞ng c·∫ßn ƒë∆∞·ª£c chƒÉm s√≥c,
                b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa m√¨nh.
              </p>
            </div>

            {/* Main Content Card */}
            <Card className="shadow-lg border-0 bg-gradient-to-br from-white to-blue-50 animate-on-scroll opacity-0">
              <CardContent className="p-12 text-center">
                {/* Icon */}
                <div className="flex justify-center mb-8">
                  <div className="w-24 h-24 bg-gradient-to-br from-[#0053A3] to-[#FF99C0] rounded-full flex items-center justify-center">
                    <img
                      src={LOGO.MESSAGE_PINK}
                      alt="donation-icon"
                      className="w-12 h-12 filter brightness-0 invert"
                    />
                  </div>
                </div>

                {/* Title */}
                <h2 className="text-3xl font-bold text-gray-900 mb-4">
                  ƒêƒÉng nh·∫≠p ƒë·ªÉ quy√™n g√≥p
                </h2>

                {/* Description */}
                <p className="text-gray-600 text-lg mb-8 max-w-md mx-auto leading-relaxed">
                  H√£y ƒëƒÉng nh·∫≠p ƒë·ªÉ tham gia v√†o c·ªông ƒë·ªìng y√™u th∆∞∆°ng v√† ƒë√≥ng g√≥p
                  cho nh·ªØng b√© th√∫ c∆∞ng ƒëang c·∫ßn ƒë∆∞·ª£c chƒÉm s√≥c.
                </p>

                {/* Benefits List */}
                <div className="grid md:grid-cols-3 gap-6 mb-10">
                  <div className="flex flex-col items-center">
                    <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-3">
                      <span className="text-2xl">üíù</span>
                    </div>
                    <h4 className="font-semibold text-gray-900 mb-2">Quy√™n g√≥p d·ªÖ d√†ng</h4>
                    <p className="text-sm text-gray-600 text-center">
                      Th·ª±c hi·ªán quy√™n g√≥p m·ªôt c√°ch nhanh ch√≥ng v√† an to√†n
                    </p>
                  </div>

                  <div className="flex flex-col items-center">
                    <div className="w-16 h-16 bg-pink-100 rounded-full flex items-center justify-center mb-3">
                      <span className="text-2xl">üêï</span>
                    </div>
                    <h4 className="font-semibold text-gray-900 mb-2">Gi√∫p ƒë·ª° th√∫ c∆∞ng</h4>
                    <p className="text-sm text-gray-600 text-center">
                      M·ªói ƒë√≥ng g√≥p ƒë·ªÅu mang l·∫°i hy v·ªçng cho c√°c b√© th√∫ c∆∞ng
                    </p>
                  </div>

                  <div className="flex flex-col items-center">
                    <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-3">
                      <span className="text-2xl">üè†</span>
                    </div>
                    <h4 className="font-semibold text-gray-900 mb-2">T√¨m m√°i ·∫•m</h4>
                    <p className="text-sm text-gray-600 text-center">
                      Gi√∫p c√°c b√© t√¨m ƒë∆∞·ª£c nh·ªØng gia ƒë√¨nh y√™u th∆∞∆°ng
                    </p>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                  <Button
                    asChild
                    variant="blue"
                    size="lg"
                    shape="pill"
                    className="min-w-[200px] text-lg font-semibold py-3 px-8 hover:shadow-lg transition-all duration-300"
                  >
                    <Link to={ROUTES.PUBLIC.SIGNIN}>
                      ƒêƒÉng nh·∫≠p ngay
                    </Link>
                  </Button>

                  <Button
                    asChild
                    variant="outline"
                    size="lg"
                    shape="pill"
                    className="min-w-[200px] text-lg font-semibold py-3 px-8 border-2 border-[#0053A3] text-[#0053A3] hover:bg-[#0053A3] hover:text-white transition-all duration-300"
                  >
                    <Link to={ROUTES.PUBLIC.SIGNUP}>
                      T·∫°o t√†i kho·∫£n m·ªõi
                    </Link>
                  </Button>
                </div>

                {/* Additional Info */}
                <div className="mt-8 p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <p className="text-sm text-blue-800">
                    <span className="font-semibold">L∆∞u √Ω:</span> Vi·ªác ƒëƒÉng nh·∫≠p gi√∫p ch√∫ng t√¥i ƒë·∫£m b·∫£o
                    t√≠nh minh b·∫°ch v√† an to√†n trong qu√° tr√¨nh quy√™n g√≥p. T·∫•t c·∫£ th√¥ng tin c·ªßa b·∫°n
                    s·∫Ω ƒë∆∞·ª£c b·∫£o m·∫≠t tuy·ªát ƒë·ªëi.
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Preview Donation Info */}
            <div className="mt-12 animate-on-scroll opacity-0">
              <div className="text-center mb-8">
                <h3 className="text-2xl font-bold text-gray-900 mb-4">
                  Sau khi ƒëƒÉng nh·∫≠p, b·∫°n c√≥ th·ªÉ:
                </h3>
              </div>

              <div className="grid md:grid-cols-2 gap-8">
                {/* Donation Preview */}
                <Card className="shadow-md border-0 overflow-hidden">
                  <div className="bg-gradient-to-r from-[#0053A3] to-[#FF99C0] p-4">
                    <h4 className="text-white font-semibold text-center">Quy√™n g√≥p tr·ª±c ti·∫øp</h4>
                  </div>
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">S·ªë ti·ªÅn g·ª£i √Ω:</span>
                        <span className="font-semibold">20,000 - 1,000,000 VNƒê</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">H√¨nh th·ª©c:</span>
                        <span className="font-semibold">M·ªôt l·∫ßn</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">Thanh to√°n:</span>
                        <span className="font-semibold">An to√†n & B·∫£o m·∫≠t</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Impact Preview */}
                <Card className="shadow-md border-0">
                  <CardContent className="p-6">
                    <h4 className="font-semibold text-gray-900 mb-4 text-center">
                      T√°c ƒë·ªông c·ªßa b·∫°n
                    </h4>
                    <div className="space-y-3">
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">üçñ</span>
                        <span className="text-gray-600">Th·ª©c ƒÉn cho th√∫ c∆∞ng</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">üíä</span>
                        <span className="text-gray-600">ChƒÉm s√≥c y t·∫ø</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">üè•</span>
                        <span className="text-gray-600">N∆°i ·ªü t·∫°m th·ªùi</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">‚ù§Ô∏è</span>
                        <span className="text-gray-600">T√¨nh y√™u th∆∞∆°ng</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
